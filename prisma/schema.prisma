// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User{
  id String @id
  username String @unique
  avatar String?
  cover String?
  name String?
  surname String?
  description String?
  city String?
  school String?
  work String?
  website String?
  createdAt DateTime @default(now())
  followers Follower[] @relation("userFollower")
  followings Follower[] @relation("userFollowing")
  followRequestSent FriendRequest[] @relation("followRequestSent")
  followRequestReceived FriendRequest[] @relation("followRequestReceived")
  blocks Block[] @relation("blockSent")
  blockedBy Block[] @relation("blockReceived")
  post Post[]
  comments Comment[]
  likes Like[]
  story Story[]
}

model Post{
  id Int @id @default(autoincrement())
  desc String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user User @relation(fields: [userId],references: [id],onDelete: Cascade)
  userId String
  comments Comment[]
  likes Like[]
}
model Comment{
  id Int @id @default(autoincrement())
  desc String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user User @relation(fields: [userId],references: [id],onDelete: Cascade)
  userId String
  post Post @relation(fields: [postId],references: [id],onDelete: Cascade)
  postId Int
  likes Like[]
}
model Like {
  id Int @id @default(autoincrement())
  createdAt DateTime @default(now())
  user User @relation(fields: [userId],references: [id],onDelete: Cascade)
  userId String
  post Post? @relation(fields: [postId],references: [id],onDelete: Cascade)
  postId Int?
  comment Comment? @relation(fields: [commentId],references: [id],onDelete: Cascade)
  commentId Int?
}
model Follower{
  id Int @id @default(autoincrement())
  createdAt DateTime @default(now())
  follower User @relation("userFollower",fields: [followerId],references: [id],onDelete: Cascade)
  followerId String
  following User @relation("userFollowing",fields: [followingId],references: [id],onDelete: Cascade)
  followingId String
}

model FriendRequest{
  id Int @id @default(autoincrement())
  createdAt DateTime @default(now())
  sender User @relation("followRequestSent",fields: [senderId],references: [id],onDelete: Cascade)
  senderId String
  receiver User @relation("followRequestReceived",fields: [receiverId],references: [id],onDelete: Cascade)
  receiverId String
  @@unique([senderId,receiverId])
}

model Block{
  id Int @id @default(autoincrement())
  createdAt DateTime @default(now())
  blocker User @relation("blockSent",fields: [blockerId],references: [id],onDelete: Cascade)
  blockerId String
  blocked User @relation("blockReceived",fields: [blockedId],references: [id],onDelete: Cascade)
  blockedId String
}
model Story{
  id Int @id @default(autoincrement())
  img String
  createdAt DateTime @default(now())
  expiresAt DateTime
  user User @relation(fields: [userId],references: [id])
  userId String @unique
}